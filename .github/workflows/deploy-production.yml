name: Deploy to NCP Production

on:
  push:
    branches: [ main ]
    tags:
      - 'v*'
  workflow_dispatch:  # 수동 실행 가능

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Cache Next.js build
      uses: actions/cache@v4
      with:
        path: |
          ~/.npm
          ${{ github.workspace }}/.next/cache
        key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**/*.js', '**/*.jsx', '**/*.ts', '**/*.tsx') }}
        restore-keys: |
          ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-

    - name: Install dependencies
      run: npm ci

    - name: Generate Prisma Client
      run: npx prisma generate
      env:
        DATABASE_URL: ${{ secrets.DATABASE_URL }}

    - name: Run tests and build
      run: |
        npm run tsc || true
        npm run lint
        NEXT_PUBLIC_SITE_URL="${NEXT_PUBLIC_SITE_URL:-http://localhost:3000}" \
        NEXTAUTH_URL="${NEXTAUTH_URL:-http://localhost:3000}" \
        npm run build
      env:
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
        NEXTAUTH_URL: ${{ secrets.NEXTAUTH_URL }}
        NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET }}
        JWT_SECRET: ${{ secrets.JWT_SECRET }}
        NEXT_PUBLIC_KAKAO_MAP_APP_KEY: ${{ secrets.NEXT_PUBLIC_KAKAO_MAP_APP_KEY }}
        NEXT_PUBLIC_SITE_URL: ${{ secrets.NEXT_PUBLIC_SITE_URL }}
        RESEND_API_KEY: ${{ secrets.RESEND_API_KEY }}
        MASTER_EMAIL: ${{ secrets.MASTER_EMAIL }}
        ENCRYPTION_KEY: ${{ secrets.ENCRYPTION_KEY }}

    - name: Deploy to NCP Server
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.NCP_HOST }}
        username: ${{ secrets.NCP_USERNAME }}
        key: ${{ secrets.NCP_SSH_KEY }}
        port: ${{ secrets.NCP_SSH_PORT }}
        envs: DATABASE_URL,NEXTAUTH_URL,NEXTAUTH_SECRET,JWT_SECRET,NEXT_PUBLIC_KAKAO_MAP_APP_KEY,NEXT_PUBLIC_SITE_URL,RESEND_API_KEY,MASTER_EMAIL,ENCRYPTION_KEY,NCP_ACCESS_KEY,NCP_ACCESS_SECRET,NCP_SENDER_EMAIL
        script: |
          cd /var/www/aedpics

          echo "Creating .env.production file..."
          echo "DATABASE_URL=\"$DATABASE_URL\"" > .env.production
          echo "NEXTAUTH_URL=\"$NEXTAUTH_URL\"" >> .env.production
          echo "NEXTAUTH_SECRET=\"$NEXTAUTH_SECRET\"" >> .env.production
          echo "JWT_SECRET=\"$JWT_SECRET\"" >> .env.production
          echo "NEXT_PUBLIC_KAKAO_MAP_APP_KEY=\"$NEXT_PUBLIC_KAKAO_MAP_APP_KEY\"" >> .env.production
          echo "NEXT_PUBLIC_SITE_URL=\"$NEXT_PUBLIC_SITE_URL\"" >> .env.production
          echo "RESEND_API_KEY=\"$RESEND_API_KEY\"" >> .env.production
          echo "MASTER_EMAIL=\"$MASTER_EMAIL\"" >> .env.production
          echo "ENCRYPTION_KEY=\"$ENCRYPTION_KEY\"" >> .env.production
          echo "NCP_ACCESS_KEY=\"$NCP_ACCESS_KEY\"" >> .env.production
          echo "NCP_ACCESS_SECRET=\"$NCP_ACCESS_SECRET\"" >> .env.production
          echo "NCP_SENDER_EMAIL=\"$NCP_SENDER_EMAIL\"" >> .env.production

          echo "Updating code from repository..."
          git fetch origin
          git reset --hard origin/main

          echo "Cleaning node_modules..."
          rm -rf node_modules package-lock.json

          echo "Installing dependencies..."
          npm install

          echo "Generating Prisma client..."
          npx prisma generate

          echo "Cleaning build cache..."
          rm -rf .next

          echo "Building application..."
          npm run build

          echo "Restarting PM2..."
          pm2 stop aedpics
          pm2 flush aedpics
          pm2 start aedpics
          pm2 save

          echo "Deployment complete!"
      env:
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
        NEXTAUTH_URL: ${{ secrets.NEXTAUTH_URL }}
        NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET }}
        JWT_SECRET: ${{ secrets.JWT_SECRET }}
        NEXT_PUBLIC_KAKAO_MAP_APP_KEY: ${{ secrets.NEXT_PUBLIC_KAKAO_MAP_APP_KEY }}
        NEXT_PUBLIC_SITE_URL: ${{ secrets.NEXT_PUBLIC_SITE_URL }}
        RESEND_API_KEY: ${{ secrets.RESEND_API_KEY }}
        MASTER_EMAIL: ${{ secrets.MASTER_EMAIL }}
        ENCRYPTION_KEY: ${{ secrets.ENCRYPTION_KEY }}
        NCP_ACCESS_KEY: ${{ secrets.NCP_ACCESS_KEY }}
        NCP_ACCESS_SECRET: ${{ secrets.NCP_ACCESS_SECRET }}
        NCP_SENDER_EMAIL: ${{ secrets.NCP_SENDER_EMAIL }}

    - name: Health Check
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.NCP_HOST }}
        username: ${{ secrets.NCP_USERNAME }}
        key: ${{ secrets.NCP_SSH_KEY }}
        port: ${{ secrets.NCP_SSH_PORT }}
        script: |
          sleep 10
          curl -f http://localhost:3000 || exit 1
          pm2 status aedpics | grep online || exit 1

    - name: Notify deployment success
      if: success()
      uses: 8398a7/action-slack@v3
      with:
        status: custom
        custom_payload: |
          {
            text: "Production deployment successful",
            attachments: [{
              color: 'good',
              text: `Deployed to NCP Production\nCommit: ${{ github.sha }}\nAuthor: ${{ github.actor }}`
            }]
          }
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

    - name: Notify deployment failure
      if: failure()
      uses: 8398a7/action-slack@v3
      with:
        status: custom
        custom_payload: |
          {
            text: "Production deployment failed",
            attachments: [{
              color: 'danger',
              text: `Failed to deploy to NCP Production\nCommit: ${{ github.sha }}\nAuthor: ${{ github.actor }}`
            }]
          }
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
